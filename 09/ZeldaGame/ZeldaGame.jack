class ZeldaGame {
    field Link link; // the sprite of Link
    field int direction; // Link's current direction: 
    // 0=none, 1=up, 2=down, 3=left, 4=right

    field Moblin moblin; // the sprite of Moblin

    field Sword sword; // the Sword sprite

    /** Constructs a new Zelda Game. */
    constructor ZeldaGame new() {
        // Creates a new Link sprite
        // Positions him at the top of the screen
        // Spawns with 3 HP and without sword
        let link = Link.new(248, 230, 3, false);

        // Creates a Moblin sprite
        let moblin = Moblin.new(495, 2, 1);

        // Creates a Sword sprite
        let sword = Sword.new(300, 100);

        let direction = 0; // initial state is no movement
        return this;
    }

    /** Disposes this game. */
    method void dispose() {
        do link.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Moves Link in the current direction. */
    method void moveLink() {
        if (direction = 1) {
            do link.moveUp();
        }
        if (direction = 2) {
            do link.moveDown();
        }
        if (direction = 3) {
            do link.moveLeft();
        }
        if (direction = 4) {
            do link.moveRight();
        }
        do Sys.wait(5); // delays the next movement
        return;
    }

    method void moveMoblin(){
        do moblin.moveDown();

        do Sys.wait(5); // delays the next movement
        return;
    }

    method void checkIfLinkHasPickedUpASword(){
        var int linkX, swordX, linkY, swordY;
        let linkX = do link.getX();
        let swordX = do sword.getX();
        let linkY = do link.getY();
        let swordY = do sword.getY();

        if((linkX = swordX) & (linkY = swordY)){
            do link.pickUpSword();
        }

        return;
    }

    /** Runs the game: handles the user's inputs and moves Link accordingly */
    method void run() {
        var char key; // the key currently pressed by the user
        var boolean exit;
        let exit = false;

        while (~exit) {
            // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveLink();
                do moveMoblin();
            }
            if (key = 81) {
                let exit = true;
            } // q key
            if (key = 32) {
                do link.attack();
            } // space key
            if (key = 131) {
                let direction = 1;
            } // up arrow
            if (key = 133) {
                let direction = 2;
            } // down arrow
            if (key = 130) {
                let direction = 3;
            } // left arrow
            if (key = 132) {
                let direction = 4;
            } // right arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveLink();
            }
        } // while
        return;
    }
}