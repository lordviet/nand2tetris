class ZeldaGame {
    field Link link; // the sprite of Link
    field int direction; // Link's current direction: 
    // 0=none, 1=up, 2=down, 3=left, 4=right

    field Moblin moblin; // the sprite of Moblin

    field Sword sword; // the Sword sprite
    field Wall wall; // the Wall sprite
    field RandomNumberGenerator rng;

    field int enemiesLeft;

    field bool isGameOver;
    field bool isLevelCleared;

    /** Constructs a new Zelda Game. */
    constructor ZeldaGame new() {
        // Creates a new Link sprite
        // Positions him at the top of the screen
        // Spawns with 3 HP and without sword
        let link = Link.new(248, 214, 3, false);

        // Creates a Moblin sprite
        let moblin = Moblin.new(495, 20, 3);

        // Define how many enemies are needed to clear the level
        let enemiesLeft = 2;

        // Creates a Sword sprite
        let sword = Sword.new(300, 100, true);

        let wall = Wall.new();

        let rng = RandomNumberGenerator.new(12345);

        let isGameOver = false;
        let isLevelCleared = false;

        let direction = 0; // initial state is no movement
        return this;
    }

    /** Disposes this game. */
    method void dispose() {
        do link.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Moves Link in the current direction. */
    method void moveLink() {
        var bool isLinkDead;
        var int cooldownTimer;

        let isLinkDead = link.getIsDead();
        let cooldownTimer = link.getCooldownTimer();

        if (isLinkDead = true) {
            let isGameOver = true;
            return;
        }

        // Check if Link is invincible and decrement cooldown timer
        if (link.getIsInvincible() = true) {
            // Decrement cooldown timer
            let cooldownTimer = cooldownTimer - 1;
            do link.setCooldownTimer(cooldownTimer);

            // If cooldown timer reaches zero or less, Link loses invincibility
            if (cooldownTimer = 0) {
                do link.setIsInvincible(false);
                do link.setCooldownTimer(10000);
            }
        }

        if (direction = 1) {
            do link.moveUp();
        }
        if (direction = 2) {
            do link.moveDown();
        }
        if (direction = 3) {
            do link.moveLeft();
        }
        if (direction = 4) {
            do link.moveRight();
        }
        do checkIfLinkHasPickedUpASword();

        if (link.getIsInvincible() = true) {
            do link.setIsInvincible(false);
        }
        do checkIfLinkHasCollidedWithMoblin();

        do spawnSwordIfLinkIsSwordless();

        do Sys.wait(5); // delays the next movement
        return;
    }

    method void moveMoblin() {
        var bool isMoblinDead;
        var int linkX, linkY;
        var int maxX, maxY;

        let isMoblinDead = moblin.getIsDead();
        let maxX = 220;
        let maxY = 220;

        if (isMoblinDead = true) {
            let enemiesLeft = enemiesLeft - 1;

            if (enemiesLeft = 0) {
                do moblin.nullify();
                let isLevelCleared = true;
                return;
            }

            do moblin.respawn(rng.nextInt(maxX), rng.nextInt(maxY));
        }

        let linkX = link.getX();
        let linkY = link.getY();

        // Update Moblin with the player's position
        do moblin.updatePlayerPosition(linkX, linkY);

        // Move Moblin towards the player
        do moblin.moveTowardsPlayer();

        do Sys.wait(5); // delays the next movement
        return;
    }

    method void checkIfLinkHasPickedUpASword() {
        var int linkX, swordX, linkY, swordY;
        var int collisionBoxWidth, collisionBoxHeight;
        var int linkLeft, linkRight, linkTop, linkBottom;
        var int swordLeft, swordRight, swordTop, swordBottom;

        let linkX = link.getX();
        let swordX = sword.getX();
        let linkY = link.getY();
        let swordY = sword.getY();

        // Define the collision box dimensions
        let collisionBoxWidth = 16; // Adjust to Link's width
        let collisionBoxHeight = 16; // Adjust to Link's height

        // Calculate the boundaries of Link's collision box
        let linkLeft = linkX;
        let linkRight = linkX + collisionBoxWidth;
        let linkTop = linkY;
        let linkBottom = linkY + collisionBoxHeight;

        // Calculate the boundaries of the sword's collision box
        let swordLeft = swordX;
        let swordRight = swordX + collisionBoxWidth;
        let swordTop = swordY;
        let swordBottom = swordY + collisionBoxHeight;

        // Check for collision between Link and the sword
        if ((linkRight > swordLeft) & (linkLeft < swordRight) & (linkBottom > swordTop) & (linkTop < swordBottom)) {
            do link.pickUpSword();
            do sword.erase();
        }

        return;
    }

    method void checkIfLinkHasCollidedWithMoblin() {
        var int linkX, moblinX, linkY, moblinY;
        var int collisionBoxWidth, collisionBoxHeight;
        var int linkLeft, linkRight, linkTop, linkBottom;
        var int moblinLeft, moblinRight, moblinTop, moblinBottom;

        let linkX = link.getX();
        let moblinX = moblin.getX();
        let linkY = link.getY();
        let moblinY = moblin.getY();

        // Define the collision box dimensions
        let collisionBoxWidth = 16; // Adjust to Link's width
        let collisionBoxHeight = 16; // Adjust to Link's height

        // Calculate the boundaries of Link's collision box
        let linkLeft = linkX;
        let linkRight = linkX + collisionBoxWidth;
        let linkTop = linkY;
        let linkBottom = linkY + collisionBoxHeight;

        // Calculate the boundaries of Moblin's collision box
        let moblinLeft = moblinX;
        let moblinRight = moblinX + collisionBoxWidth;
        let moblinTop = moblinY;
        let moblinBottom = moblinY + collisionBoxHeight;

        // Check for collision between Link and the Moblin
        if ((linkRight > moblinLeft) & (linkLeft < moblinRight) & (linkBottom > moblinTop) & (linkTop < moblinBottom)) {
            do link.takeDamage();
            do link.setIsInvincible(true);
        }

        return;
    }

    method void spawnSwordIfLinkIsSwordless() {
        var bool linkHasSword, swordIsActive;
        var int minX, minY, maxX, maxY, swordX, swordY;

        let linkHasSword = link.getHasSword();
        let swordIsActive = sword.getIsActive();

        if ((linkHasSword = true) | (swordIsActive = true)) {
            return;
        }

        // Define the minimum values for X and Y
        let minX = 16;
        let minY = 16;

        let maxX = 240;
        let maxY = 200;

        let swordX = rng.nextInt(maxX - minX) + minX;
        let swordY = rng.nextInt(maxY - minY) + minY;

        do sword.setX(swordX);
        do sword.setY(swordY);

        do sword.draw();

        return;
    }

    method void performAttack() {
        var int linkX, originalSwordX, linkY, originalSwordY;
        var bool isSwordFlying, swordDirection, isCollidingWithMoblin;

        let linkX = link.getX();
        let linkY = link.getY();

        // save the state of the original sword co-ordinates
        let originalSwordX = sword.getX();
        let originalSwordY = sword.getY();

        if (link.getHasSword() = false) {
            return;
        }

        do link.attack();

        // Set sword's co-ordinates to Link's
        do sword.setX(linkX);
        do sword.setY(linkY);

        do sword.setIsFlying(true);
        do sword.setFlyingDirection(direction);

        let swordDirection = sword.getFlyingDirection();

        while (~(swordDirection = 0)) {
            if (direction = 1) {
                do sword.moveUp();
            }
            if (direction = 2) {
                do sword.moveDown();
            }
            if (direction = 3) {
                do sword.moveLeft();
            }
            if (direction = 4) {
                do sword.moveRight();
            }

            // Check for collision with Moblin
            let isCollidingWithMoblin = checkMoblinCollision(sword.getX(), sword.getY());

            // If there is a collision with Moblin
            if (isCollidingWithMoblin) {
                do moblin.takeDamage(); // Apply damage to Moblin
                do sword.erase(); // Erase the sword
                do sword.setFlyingDirection(0); // Reset sword direction
                let swordDirection = sword.getFlyingDirection(); // Update sword direction
            }

            if ((sword.getX() = 494) | (sword.getX() = 16) | (sword.getY() = 224) | (sword.getY() = 16)) {
                do Sys.wait(5);
                do sword.erase();
                do sword.setFlyingDirection(0);
                let swordDirection = sword.getFlyingDirection();
            }
        }

        do sword.setX(originalSwordX);
        do sword.setY(originalSwordY);

        return;
    }

    method boolean checkMoblinCollision(int swordX, int swordY) {
        var int moblinX, moblinY;
        var int moblinWidth, moblinHeight;
        var int moblinLeft, moblinRight, moblinTop, moblinBottom;

        // Define the hard-coded collision box dimensions for Moblin
        let moblinWidth = 32; // Adjust to Moblin's width
        let moblinHeight = 32; // Adjust to Moblin's height

        // Get Moblin's position (you need to implement this)
        let moblinX = moblin.getX();
        let moblinY = moblin.getY();

        // Calculate the boundaries of Moblin's collision box
        let moblinLeft = moblinX;
        let moblinRight = moblinX + moblinWidth;
        let moblinTop = moblinY;
        let moblinBottom = moblinY + moblinHeight;

        // Check for collision
        if (
            (swordX < moblinRight) & // Sword's right edge is to the left of Moblin's right edge
            (swordX + 16 > moblinLeft) & // Sword's left edge is to the right of Moblin's left edge
            (swordY < moblinBottom) & // Sword's bottom edge is above Moblin's bottom edge
            (swordY + 16 > moblinTop) // Sword's top edge is below Moblin's top edge
        ) {
            return true; // Collision detected
        }

        return false; // No collision
    }

    /** Runs the game: handles the user's inputs and moves Link accordingly */
    method void run() {
        var char key; // the key currently pressed by the user
        var boolean exit;
        let exit = false;

        while (~exit) {
            // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveLink();
                if (enemiesLeft > 0) {
                    do moveMoblin();
                }
            }
            if (key = 81) {
                let exit = true;
            } // q key
            if (key = 32) {
                do performAttack();
            } // space key
            if (key = 131) {
                let direction = 1;
            } // up arrow
            if (key = 133) {
                let direction = 2;
            } // down arrow
            if (key = 130) {
                let direction = 3;
            } // left arrow
            if (key = 132) {
                let direction = 4;
            } // right arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveLink();
            }
        } // while
        return;
    }
}