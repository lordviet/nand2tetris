class Wall {
    field int x, y;

    constructor Wall new() {
        let x = 0;
        let y = 0;
        do draw();

        return this;
    }

    /** Disposes Wall. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        do drawTop();
        do drawBottom();
        do drawLeft();
        do drawRight();
        return;
    }

    method void drawTop() {
        var int memAddress;

        let x = 0;
        let y = 0;

        while (x < 512) {
            let memAddress = 16384 + (x / 16) + (y * 32);

            do Memory.poke(memAddress + 0, -1);
            do Memory.poke(memAddress + 32, -1);
            do Memory.poke(memAddress + 64, -1);
            do Memory.poke(memAddress + 96, -1);
            do Memory.poke(memAddress + 128, -1);
            do Memory.poke(memAddress + 160, -1);
            do Memory.poke(memAddress + 192, -1);
            do Memory.poke(memAddress + 224, 0);
            do Memory.poke(memAddress + 256, 0);
            do Memory.poke(memAddress + 288, -1);
            do Memory.poke(memAddress + 320, -1);
            do Memory.poke(memAddress + 352, -1);
            do Memory.poke(memAddress + 384, -1);
            do Memory.poke(memAddress + 416, -1);
            do Memory.poke(memAddress + 448, -1);
            do Memory.poke(memAddress + 480, -1);

            let x = x + 16;
        }

        return;
    }

    method void drawBottom() {
        var int memAddress;

        let x = 0;
        let y = 240;

        while (x < 512) {
            let memAddress = 16384 + (x / 16) + (y * 32);

            do Memory.poke(memAddress + 0, -1);
            do Memory.poke(memAddress + 32, -1);
            do Memory.poke(memAddress + 64, -1);
            do Memory.poke(memAddress + 96, -1);
            do Memory.poke(memAddress + 128, -1);
            do Memory.poke(memAddress + 160, -1);
            do Memory.poke(memAddress + 192, -1);
            do Memory.poke(memAddress + 224, 0);
            do Memory.poke(memAddress + 256, 0);
            do Memory.poke(memAddress + 288, -1);
            do Memory.poke(memAddress + 320, -1);
            do Memory.poke(memAddress + 352, -1);
            do Memory.poke(memAddress + 384, -1);
            do Memory.poke(memAddress + 416, -1);
            do Memory.poke(memAddress + 448, -1);
            do Memory.poke(memAddress + 480, -1);

            let x = x + 16;
        }

        return;
    }

    method void drawLeft() {
        var int memAddress;

        let x = 0;
        let y = 16;

        while (y < 240) {
            let memAddress = 16384 + (x / 16) + (y * 32);

            do Memory.poke(memAddress + 0, 127);
            do Memory.poke(memAddress + 32, -1153);
            do Memory.poke(memAddress + 64, -1153);
            do Memory.poke(memAddress + 96, -1153);
            do Memory.poke(memAddress + 128, -1153);
            do Memory.poke(memAddress + 160, -1153);
            do Memory.poke(memAddress + 192, -1153);
            do Memory.poke(memAddress + 224, -1153);
            do Memory.poke(memAddress + 256, 127);
            do Memory.poke(memAddress + 288, -1153);
            do Memory.poke(memAddress + 320, -1153);
            do Memory.poke(memAddress + 352, -1153);
            do Memory.poke(memAddress + 384, -1153);
            do Memory.poke(memAddress + 416, -1153);
            do Memory.poke(memAddress + 448, -1153);
            do Memory.poke(memAddress + 480, -1153);

            let y = y + 16;
        }

        return;
    }

    method void drawRight() {
        var int memAddress;

        let x = 511;
        let y = 16;

        while (y < 240) {
            let memAddress = 16384 + (x / 16) + (y * 32);

            do Memory.poke(memAddress + 0, -256);
            do Memory.poke(memAddress + 32, -145);
            do Memory.poke(memAddress + 64, -145);
            do Memory.poke(memAddress + 96, -145);
            do Memory.poke(memAddress + 128, -145);
            do Memory.poke(memAddress + 160, -145);
            do Memory.poke(memAddress + 192, -145);
            do Memory.poke(memAddress + 224, -145);
            do Memory.poke(memAddress + 256, -256);
            do Memory.poke(memAddress + 288, -145);
            do Memory.poke(memAddress + 320, -145);
            do Memory.poke(memAddress + 352, -145);
            do Memory.poke(memAddress + 384, -145);
            do Memory.poke(memAddress + 416, -145);
            do Memory.poke(memAddress + 448, -145);
            do Memory.poke(memAddress + 480, -145);

            let y = y + 16;
        }

        return;
    }
}