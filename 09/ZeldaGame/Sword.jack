/** Implements Sword */
class Sword {

    field int x, y;
    field bool isActive;
    field bool isFlying;
    field int flyingDirection;

    /** Constructs a new Sword sprite. */
    constructor Sword new(int Ax, int Ay, bool IsActive) {
        let x = Ax;
        let y = Ay;
        let isActive = IsActive;
        let isFlying = false;
        let flyingDirection = 0;
        do draw();
        return this;
    }

    /** Disposes Sword. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }

    method void setX(int Ax) {
        let x = Ax;
        return;
    }

    method void setY(int Ay) {
        let y = Ay;
        return;
    }

    method bool getIsActive() {
        return isActive;
    }

    method void setIsFlying(bool isSwordFlying){
        let isFlying = isSwordFlying;
        return;
    }

    method bool getIsFlying() {
        return isFlying;
    }

    method int getFlyingDirection() {
        return flyingDirection;
    }

    method void setFlyingDirection(int direction){
        let flyingDirection = direction;
        return;
    }

    /** Draws default Sword on the screen */
    method void draw() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress+0, 0);
	    do Memory.poke(memAddress+32, 0);
	    do Memory.poke(memAddress+64, 0);
	    do Memory.poke(memAddress+96, 0);
	    do Memory.poke(memAddress+128, 128);
	    do Memory.poke(memAddress+160, 128);
	    do Memory.poke(memAddress+192, 128);
	    do Memory.poke(memAddress+224, 128);
	    do Memory.poke(memAddress+256, 128);
	    do Memory.poke(memAddress+288, 448);
	    do Memory.poke(memAddress+320, 128);
	    do Memory.poke(memAddress+352, 128);
	    do Memory.poke(memAddress+384, 0);
	    do Memory.poke(memAddress+416, 0);
	    do Memory.poke(memAddress+448, 0);
	    do Memory.poke(memAddress+480, 0);

        let isActive = true;

        return;
    }

    method void drawRight() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 64);
        do Memory.poke(memAddress + 224, 4080);
        do Memory.poke(memAddress + 256, 64);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        return;
    }

    method void drawLeft() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress+0, 0);
	    do Memory.poke(memAddress+32, 0);
	    do Memory.poke(memAddress+64, 0);
	    do Memory.poke(memAddress+96, 0);
	    do Memory.poke(memAddress+128, 0);
	    do Memory.poke(memAddress+160, 0);
	    do Memory.poke(memAddress+192, 512);
	    do Memory.poke(memAddress+224, 4080);
	    do Memory.poke(memAddress+256, 512);
	    do Memory.poke(memAddress+288, 0);
	    do Memory.poke(memAddress+320, 0);
	    do Memory.poke(memAddress+352, 0);
	    do Memory.poke(memAddress+384, 0);
	    do Memory.poke(memAddress+416, 0);
	    do Memory.poke(memAddress+448, 0);
	    do Memory.poke(memAddress+480, 0);

        return;
    }

    method void drawDown() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress+0, 0);
	    do Memory.poke(memAddress+32, 0);
	    do Memory.poke(memAddress+64, 0);
	    do Memory.poke(memAddress+96, 0);
	    do Memory.poke(memAddress+128, 128);
	    do Memory.poke(memAddress+160, 128);
	    do Memory.poke(memAddress+192, 448);
	    do Memory.poke(memAddress+224, 128);
	    do Memory.poke(memAddress+256, 128);
	    do Memory.poke(memAddress+288, 128);
	    do Memory.poke(memAddress+320, 128);
	    do Memory.poke(memAddress+352, 128);
	    do Memory.poke(memAddress+384, 0);
	    do Memory.poke(memAddress+416, 0);
	    do Memory.poke(memAddress+448, 0);
	    do Memory.poke(memAddress+480, 0);

        return;
    }

    /** Erases Sword from the screen. */
    method void erase() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        let isActive = false;

        return;
    }

    /** Moves Sword up by 1 pixels. */
    method void moveUp() {
        if (y > 16) {
            do erase();
            let y = y - 1;
            do draw();
        }
        return;
    }

    /** Moves Sword down by 1 pixels. */
    method void moveDown() {
        if (y < 224) {
            do erase();
            let y = y + 1;
            do drawDown();
        }
        return;
    }

    /** Moves Sword left by 1 pixels. */
    method void moveLeft() {
        if (x > 16) {
            do erase();
            let x = x - 1;
            do drawLeft();
        }
        return;
    }

    /** Moves Sword right by 1 pixels. */
    method void moveRight() {
        if (x < 494) {
            do erase();
            let x = x + 1;
            do drawRight();
        }
        return;
    }
}