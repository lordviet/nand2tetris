/** Implements the Moblin enemy. */
class Moblin {

    field int x, y, health; // screen location of Moblin's top-left corner and HP
    field int linkX, linkY; // screen location of Link's position

    /** Constructs a new Moblin sprite with a given location. */
    constructor Moblin new(int Ax, int Ay, int Hp) {
        let x = Ax;
        let y = Ay;
        let health = Hp;
        do draw();
        return this;
    }

    /** Disposes Moblin. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }

    method void takeDamage(){
        let health = health - 1;
        
        if((health < 0) | (health = 0)){
            let health = 0;
            do erase();
            // moblin isActive prop or somethin
        }

        return;
    }

    // method void setX(int Ax) {
    //     let x = Ax;
    //     return;
    // }

    // method void setY(int Ay) {
    //     let y = Ay;
    //     return;
    // }

    /** Draws default Moblin (or going down) on the screen. */
    method void draw() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress + 0, 15420);
        do Memory.poke(memAddress + 32, 8184);
        do Memory.poke(memAddress + 64, 2016);
        do Memory.poke(memAddress + 96, 7608);
        do Memory.poke(memAddress + 128, 16380);
        do Memory.poke(memAddress + 160, -385);
        do Memory.poke(memAddress + 192, -1);
        do Memory.poke(memAddress + 224, -17347);
        do Memory.poke(memAddress + 256, -17443);
        do Memory.poke(memAddress + 288, -16387);
        do Memory.poke(memAddress + 320, -24583);
        do Memory.poke(memAddress + 352, 8184);
        do Memory.poke(memAddress + 384, 8184);
        do Memory.poke(memAddress + 416, 8184);
        do Memory.poke(memAddress + 448, 3120);
        do Memory.poke(memAddress + 480, 3120);

        return;
    }

    /** Draws Moblin going up on the screen. */
    method void drawUp() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress + 0, 15420);
        do Memory.poke(memAddress + 32, 8184);
        do Memory.poke(memAddress + 64, 2016);
        do Memory.poke(memAddress + 96, 8184);
        do Memory.poke(memAddress + 128, 16380);
        do Memory.poke(memAddress + 160, -1);
        do Memory.poke(memAddress + 192, -1);
        do Memory.poke(memAddress + 224, -16387);
        do Memory.poke(memAddress + 256, -16387);
        do Memory.poke(memAddress + 288, -16387);
        do Memory.poke(memAddress + 320, -24583);
        do Memory.poke(memAddress + 352, 8184);
        do Memory.poke(memAddress + 384, 8184);
        do Memory.poke(memAddress + 416, 8184);
        do Memory.poke(memAddress + 448, 3120);
        do Memory.poke(memAddress + 480, 3120);

        return;
    }

    /** Draws Moblin going right on the screen. */
    method void drawRight() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress + 0, 1022);
        do Memory.poke(memAddress + 32, 2040);
        do Memory.poke(memAddress + 64, 2032);
        do Memory.poke(memAddress + 96, 3580);
        do Memory.poke(memAddress + 128, 32766);
        do Memory.poke(memAddress + 160, 24574);
        do Memory.poke(memAddress + 192, 32766);
        do Memory.poke(memAddress + 224, 5118);
        do Memory.poke(memAddress + 256, 7678);
        do Memory.poke(memAddress + 288, 4094);
        do Memory.poke(memAddress + 320, -2);
        do Memory.poke(memAddress + 352, 8191);
        do Memory.poke(memAddress + 384, -1);
        do Memory.poke(memAddress + 416, 4094);
        do Memory.poke(memAddress + 448, 4094);
        do Memory.poke(memAddress + 480, 1820);

        return;
    }

    /** Draws Moblin going left on the screen. */
    method void drawLeft() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress + 0, 32704);
        do Memory.poke(memAddress + 32, 8160);
        do Memory.poke(memAddress + 64, 4064);
        do Memory.poke(memAddress + 96, 16304);
        do Memory.poke(memAddress + 128, 32766);
        do Memory.poke(memAddress + 160, 32762);
        do Memory.poke(memAddress + 192, 32766);
        do Memory.poke(memAddress + 224, 32712);
        do Memory.poke(memAddress + 256, 32696);
        do Memory.poke(memAddress + 288, 32752);
        do Memory.poke(memAddress + 320, 32767);
        do Memory.poke(memAddress + 352, -8);
        do Memory.poke(memAddress + 384, -1);
        do Memory.poke(memAddress + 416, 32752);
        do Memory.poke(memAddress + 448, 32752);
        do Memory.poke(memAddress + 480, 14560);

        return;
    }

    /** Erases Moblin from the screen. */
    method void erase() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        return;
    }

    /** Update the player's position. */
    method void updatePlayerPosition(int playerPosX, int playerPosY) {
        let linkX = playerPosX;
        let linkY = playerPosY;

        return;
    }

    method void moveTowardsPlayer() {
        if (health = 0){
            return;
        }

        if (linkX < x) {
            // Move left
            do moveLeft();
        }

        if (linkX > x) {
            // Move right
            do moveRight();
        }

        if (linkY < y) {
            // Move up
            do moveUp();
        }

        if (linkY > y) {
            // Move down
            do moveDown();
        }

        return;
    }

    /** Moves Moblin up by 1 pixels. */
    method void moveUp() {
        if (y > 1) {
            do erase();
            let y = y - 1;
            do drawUp();
        }
        return;
    }

    /** Moves Moblin down by 1 pixels. */
    method void moveDown() {
        if (y < 240) {
            do erase();
            let y = y + 1;
            do draw();
        }
        return;
    }

    /** Moves Moblin left by 1 pixels. */
    method void moveLeft() {
        if (x > 1) {
            do erase();
            let x = x - 1;
            do drawLeft();
        }
        return;
    }

    /** Moves Moblin right by 1 pixels. */
    method void moveRight() {
        if (x < 510) {
            do erase();
            let x = x + 1;
            do drawRight();
        }
        return;
    }
}