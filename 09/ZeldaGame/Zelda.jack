class Zelda {
    field int x, y;

    constructor Zelda new() {
        let x = 248;
        let y = 16;

        do draw();
        return this;
    }

    /** Disposes Zelda. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }

    /** Draws Zelda on the screen. */
    method void draw() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 2016);
        do Memory.poke(memAddress + 64, 3024);
        do Memory.poke(memAddress + 96, 3120);
        do Memory.poke(memAddress + 128, 4080);
        do Memory.poke(memAddress + 160, 7608);
        do Memory.poke(memAddress + 192, 8184);
        do Memory.poke(memAddress + 224, 15996);
        do Memory.poke(memAddress + 256, 13260);
        do Memory.poke(memAddress + 288, 12300);
        do Memory.poke(memAddress + 320, 14364);
        do Memory.poke(memAddress + 352, 12300);
        do Memory.poke(memAddress + 384, 9156);
        do Memory.poke(memAddress + 416, 8196);
        do Memory.poke(memAddress + 448, 16386);
        do Memory.poke(memAddress + 480, -1);

        return;
    }

    /** Erases Zelda from the screen. */
    method void erase() {
        var int memAddress;
        let memAddress = 16384 + (x / 16) + (y * 32);

        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        return;
    }
}