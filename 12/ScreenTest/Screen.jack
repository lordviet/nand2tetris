// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array ram;

    static boolean black;
    static boolean white;
    static boolean currentColor;

    /** Initializes the Screen. */
    function void init() {
        let ram = 16384;

        let black = true;
        let white = false;

        let currentColor = black;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;

        while (i < 8192) {
            let ram[i] = white;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;

        let address = (32 * y) + (x / 16);
        let mask = Math.twoToThe(x & 15);

        if (currentColor) {
            let ram[address] = ram[address] | mask; // black color
            return;
        }

        let ram[address] = ram[address] | ~mask; // white color
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int temp;

        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
        }

        if (dy = 0) {
            do Screen.drawHorizontalLine(x1, x2, y1);
        }

        else {
            do Screen.drawDiagonalLine(x1, y1, x2, y2, dx, dy);
        }

        return;
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2, int dx, int dy) {
        var int a, b;
        var int adyMinusbdx;
        var int yIncremented;

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        
        if(dy < 0) {
            let yIncremented = -1;
        }
        else {
            let yIncremented = 1;
        }

        while(~(a > dx) & (((yIncremented = 1) & ~(b > dy)) | ((yIncremented = -1) & ~(b < dy)))) {
            do Screen.drawPixel(x1 + a, y1 + b);

            if(adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy * yIncremented);
            }
            else {
                let b = b + yIncremented;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }

        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int temp;
        
        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        
        while(~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int startAddress, endAddress;
        var int x1mod16, x2mod16;
        
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;
        let startAddress = (y * 32) + (x1 / 16);
        let endAddress = (y * 32) + (x2 / 16) + (x2mod16 = 0);

        // Line starts and ends within the same screen address
        if (startAddress = endAddress) {
            do Screen.drawShortHorizontalLine( x1, x2, y );
            return;
        }

        // Short start of the line
        if (~(x1mod16 = 0)) {
            let startAddress = startAddress + 1;
            do Screen.drawShortHorizontalLine(x1, x1 + 16 - x1mod16, y);
        }

        // Short end of the line
        if (~(x2mod16 = 0)) {
            let endAddress = endAddress - 1;
            do Screen.drawShortHorizontalLine(x2 - x2mod16, x2, y);
        }

        // Draw the middle of the line
        while (~(startAddress > endAddress)) {
            let ram[startAddress] = currentColor;
            let startAddress = startAddress + 1;
        }

        return;
    }

    function void drawShortHorizontalLine(int x1, int x2, int y) {
        while (~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
    
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;

        while (~(y > y2))
		{
			do Screen.drawLine(x1, y, x2, y);
			let y = y + 1;
		}

		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        var int rSquared;
        
        let dy = -r;
        let rSquared = r * r;

        while( ~(dy > r)) {
            let dx = Math.sqrt(rSquared - (dy * dy));
            do Screen.drawHorizontalLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
