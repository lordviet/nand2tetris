// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array free;
    
    static int heapBase;
    static int next, length;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        let free = heapBase;

        let next = 0;
        let length = 1;

        let free[next] = null; // In the beginning there's no next segment since it hasn't been fragmented yet
        let free[length] = 16383 - 2048; // In the beginning the size of the segment is the size of the entire heap

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, prevBlock, nextBlock;
        
        let block = free;
        let prevBlock = 0;

        while(block[length] < size) {
            let prevBlock = block;
            let block = block[next];

            if (block = null) {
                return -1;
            }
        }

        // represents the start of the next free memory block after the allocation
        // - block is the start address of the currently found suitable block
        // - size is the size of the memory requested
        // - (+ 2) accounts for the metadata (next and length)
        let nextBlock = block + size + 2; // size + the needed memory for next list and length of the current one

        // adjusting nextBlock's metadata
        let nextBlock[next] = block[next];
        let nextBlock[length] = block[length] - size - 2;
    
        let block[next] = null; // setting the next pointer to null as it's no longer part of the free list
        let block[length] = size; // the length of the allocated block is set to the requested size

        // if the allocated block was the first block in the free list, the head of the free list is updated to next block
        if (prevBlock = 0) {
            let free = nextBlock;
        } else {
            // otherwise the next pointer of the prev block is updated, effectively removing the allocated block from the free list
            let prevBlock[next] = nextBlock;
        }

        // returns the address of the allocated block, offset by 2 units which accounts for the metadata ("next" and "length") stored at the beginning
        return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array block;

        // accounting for the meta data
        let block = o - 2;

        // set the next pointer of the block being deallocated to the current head of the free list
        let block[next] = free;

        // this block becomes the new head of the free list
        let free = block;
    
        return;
    }    
}
